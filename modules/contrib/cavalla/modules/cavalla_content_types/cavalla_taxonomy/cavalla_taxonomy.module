<?php

/**
 * @file
 * Cavalla_taxonomy module file.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function cavalla_taxonomy_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cavalla_taxonomy':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 * Lets us define our node templates in this module.
 */


function getNodesByTaxonomyTermIds($termIds){
  $termIds = (array) $termIds;
  if(empty($termIds)){
    return NULL;
  }

  $query = \Drupal::database()->select('taxonomy_index', 'ti');
  $query->fields('ti', array('nid'));
  $query->condition('ti.tid', $termIds, 'IN');
  $query->distinct(TRUE);
  $result = $query->execute();

  if($nodeIds = $result->fetchCol()){
    return Node::loadMultiple($nodeIds);
  }

  return NULL;
}


/**
 * Implements hook_theme().
 * Lets us define our paragraphs templates in this module.
 */
function cavalla_taxonomy_preprocess_taxonomy_term(&$variables) {
  $breadcrump_block_object = Block::load('cavalla_theme_breadcrumbs');
  /* creates a renderable array from the block object */
  $variables['breadcrumb'] = \Drupal::entityManager()->getViewBuilder('block')->view($breadcrump_block_object);

  $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
  $name = Term::load($tid)->get('name')->value;
  $variables['page_title'] = $name;
}

function cavalla_taxonomy_theme($existing, $type, $theme, $path) {
  return [
    'node__cavalla_blog__teaser' => [
      'base hook' => 'node',
    ],
    'cavalla_taxonomy__views_view' => [
      'base hook' => 'cavalla_taxonomy',
    ]
  ];
}

function cavalla_taxonomy_theme_suggestions_views_view(array $variables) {
  $suggestions = [];
  $suggestions[] = 'cavalla_taxonomy__views_view';
  return $suggestions;
}